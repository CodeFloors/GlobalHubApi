// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GlobalHub.Migrations
{
    [DbContext(typeof(GlobalHubContext))]
    [Migration("20220515222643_add-missing-column")]
    partial class addmissingcolumn
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GlobalHub.Entities.ApplicationParameterNames", b =>
                {
                    b.Property<long>("PkapplicationParameterCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PkapplicationParameterCode"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("DataType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplaySequence")
                        .HasColumnType("int");

                    b.Property<string>("FieldType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FieldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FkApplicationCode")
                        .HasColumnType("int");

                    b.Property<string>("HelpText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HelpUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IncludeInDispatchAPI")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludeInInventoryAPI")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludeInInvoiceAPI")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludeInLabelAPI")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludeInOrdersAPI")
                        .HasColumnType("bit");

                    b.Property<int>("PageTab")
                        .HasColumnType("int");

                    b.Property<string>("ParameterName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PkapplicationParameterCode");

                    b.HasIndex("FkApplicationCode");

                    b.ToTable("ApplicationParameterNames");
                });

            modelBuilder.Entity("GlobalHub.Entities.ApplicationParameters", b =>
                {
                    b.Property<long>("PkapplicationParameterCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PkapplicationParameterCode"), 1L, 1);

                    b.Property<long>("FkAccountCode")
                        .HasColumnType("bigint");

                    b.Property<string>("ParameterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParameterValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PkapplicationParameterCode");

                    b.HasIndex("FkAccountCode");

                    b.ToTable("ApplicationParameters");
                });

            modelBuilder.Entity("GlobalHub.Entities.Applications", b =>
                {
                    b.Property<int>("PkapplicationsCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PkapplicationsCode"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowsDownloads")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowsInventoryUpdates")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowsInvoicing")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowsLabelGeneration")
                        .HasColumnType("bit");

                    b.Property<string>("ApplicationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Imageurl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PricePerMonth")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PkapplicationsCode");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("GlobalHub.Entities.ApplicationsAccounts", b =>
                {
                    b.Property<long>("PkAccountCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PkAccountCode"), 1L, 1);

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("FkApplicationCode")
                        .HasColumnType("int");

                    b.Property<long>("FkuserId")
                        .HasColumnType("bigint");

                    b.HasKey("PkAccountCode");

                    b.HasIndex("FkApplicationCode");

                    b.HasIndex("FkuserId");

                    b.ToTable("ApplicationsAccounts");
                });

            modelBuilder.Entity("GlobalHub.Entities.Counteries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PKCountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Counteries");
                });

            modelBuilder.Entity("GlobalHub.Entities.Users", b =>
                {
                    b.Property<long>("Userid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Userid"), 1L, 1);

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Useraddress1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Useraddress2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Useraddress3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Usercity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Usercompanyname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Usercountrycode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Usercounty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Useremail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Userfirstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Userlastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Userpostcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Userstate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Usertelephone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Userid");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GlobalHub.Entities.ApplicationParameterNames", b =>
                {
                    b.HasOne("GlobalHub.Entities.Applications", "Applications")
                        .WithMany("ApplicationParameterNames")
                        .HasForeignKey("FkApplicationCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applications");
                });

            modelBuilder.Entity("GlobalHub.Entities.ApplicationParameters", b =>
                {
                    b.HasOne("GlobalHub.Entities.ApplicationsAccounts", "ApplicationsAccounts")
                        .WithMany("ApplicationParameters")
                        .HasForeignKey("FkAccountCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationsAccounts");
                });

            modelBuilder.Entity("GlobalHub.Entities.ApplicationsAccounts", b =>
                {
                    b.HasOne("GlobalHub.Entities.Applications", "Applications")
                        .WithMany("ApplicationsAccounts")
                        .HasForeignKey("FkApplicationCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GlobalHub.Entities.Users", "Users")
                        .WithMany("ApplicationsAccounts")
                        .HasForeignKey("FkuserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applications");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("GlobalHub.Entities.Applications", b =>
                {
                    b.Navigation("ApplicationParameterNames");

                    b.Navigation("ApplicationsAccounts");
                });

            modelBuilder.Entity("GlobalHub.Entities.ApplicationsAccounts", b =>
                {
                    b.Navigation("ApplicationParameters");
                });

            modelBuilder.Entity("GlobalHub.Entities.Users", b =>
                {
                    b.Navigation("ApplicationsAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
